import gradio as gr
import requests
from loguru import logger
import os

env_BACKEND_URL = os.environ.get('BACKEND_URL', '127.0.0.1') # Adjust the default port if necessary
# URL for the backend FastAPI server
BACKEND_URL_1 = "http://"+env_BACKEND_URL+":8088/recommend"
BACKEND_URL_2 = "http://"+env_BACKEND_URL+":8088/chat"


def change_tab(id):
    return gr.Tabs(selected=id)
def clear_history():
    return [], []

# Function to send preferences to the backend
def get_pet_recommendation(preferences):
    try:
        response = requests.post(BACKEND_URL_1, json={"preferences": preferences})
        if response.status_code == 200:
            result = response.json()
            return result['recommendation']
        else:
            return f"Error: {response.status_code} - {response.text}"
    except Exception as e:
        return f"Error: {str(e)}"
    
def get_chat_response(input_text, history):
    try:
        response = requests.post(BACKEND_URL_2, json={"input_text": input_text, "history": history})
        if response.status_code == 200:
            result = response.json()
            return result['history']
        else:
            return f"Error: {response.status_code} - {response.text}"
    except Exception as e:
        return f"Error: {str(e)}"
    
# ---  Question and Answer Options ---
questions = [
    ("size", "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?"),
    ("playfulness", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏´‡∏ô?"),
    ("children friendly", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
    ("grooming", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏£‡∏á‡∏Ç‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?"),
    ("intelligence", "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏´‡∏ô?"),
    ("other pets friendly", "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
    ("life span", "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏¢‡∏∑‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÑ‡∏´‡∏ô?"),
    ("exercise requirements", "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?"),
    ("purchase price", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?"),
    ("barking", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?"),
]

question_options = [
    [("Skip", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ"), ("Small", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å"), ("Medium", "‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á"), ("Large-Giant", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà")],
    [("Low", "‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ"), ("Moderate", "‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤"), ("High", "‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤")],
    [("Skip", "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"), ("Moderate-High", "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ")],
    [("Low", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á"), ("Moderate", "2-4 ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"), ("High", "‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡∏±‡πâ‡∏á")],
    [("Skip", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏â‡∏•‡∏≤‡∏î"), ("Moderate", "‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"), ("High-Very High", "‡∏ï‡πâ‡∏≠‡∏á‡∏â‡∏•‡∏≤‡∏î‡∏°‡∏≤‡∏Å")],
    [("Skip", "‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"), ("High", "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô")],
    [("Skip", "‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ"), ("Short", "‡∏™‡∏±‡πâ‡∏ô (5-8 ‡∏õ‡∏µ)"), ("Medium", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (9-12 ‡∏õ‡∏µ)"), ("Long", "‡∏¢‡∏≤‡∏ß (13+ ‡∏õ‡∏µ)")],
    [("Low", "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏°./‡∏ß‡∏±‡∏ô"), ("Moderate", "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ä‡∏°./‡∏ß‡∏±‡∏ô"), ("High", "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1.5 ‡∏ä‡∏°./‡∏ß‡∏±‡∏ô")],
    [("Cheap", "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó"), ("Moderate", "500-1000 ‡∏ö‡∏≤‡∏ó"), ("Expensive", "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1000 ‡∏ö‡∏≤‡∏ó")],
    [("Skip", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πà‡∏≤"), ("Low", "‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πà‡∏≤"), ("Moderate", "‡πÄ‡∏´‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á")]
]
with gr.Blocks(css=""" 
    @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Varela+Round&display=swap');
    @import url('https://fonts.google.com/share?selection.family=Sarabun:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800');
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai+Looped:wght@100;200;300;400;500;600;700;800;900&family=Sarabun:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');
   .my-radio-btn {
    width: 100%;
    margin-bottom: 6px;
    font-size: 20px;
    padding: 6px;
    background-color: #ef9aa4;  /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏° */
    color: white;
    border: none;
    border-radius: 32px;
    font-family: "Varela Round", sans-serif;
    font-weight: 700;
    letter-spacing: 1.3px;
    }
    .my-radio-btn:hover {
        background-color: #D2665A;  /* ‡∏Ñ‡∏á‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover */
    }
    .my-radio-btn-start{width: 30%;
    margin-bottom: 6px;
    font-size: 20px;
    padding: 6px;
    background-color: #ef9aa4;  /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏° */
    color: white;
    border: none;
    border-radius: 32px;
    font-family: "Varela Round", sans-serif;
    font-weight: 700;
    letter-spacing: 1.3px;
    display: block;  /* Makes the button a block element */
    margin-left: auto;  /* Centers the button horizontally */
    margin-right: auto;  /* Centers the button horizontally */
               
               }

.dropdown-container .gradio-dropdown .choice {
    padding: 12px;
    border: 2px solid #ef9aa4;  /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á dropdown */
    border-radius: 8px;
    background-color: white;
    color: #333;
    font-size: 16px;
    text-align: center;
    font-family: "Varela Round", sans-serif;
    font-weight: 600;
    cursor: pointer;
}

.dropdown-container .gradio-dropdown .choice:hover {
    background-color: #D2665A;
    color: white;
    font-family: "Noto Sans Thai Looped", sans-serif;
  font-weight: 200;
  font-style: normal;
}

/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡πà‡∏≠‡∏ô */
.gradio-container {
    padding-top: 50px;  /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */

    background-color: #fff2d8;  /* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡πà‡∏≠‡∏ô */
    font-family: "Noto Sans Thai Looped", sans-serif;
  font-weight: 200;
  font-style: normal;
}
#title {
        text-align: center;
        margin-top: -10;
        color: black;
        border: none;
        font-family: "Varela Round", sans-serif;
        font-weight: 900;
        font-size: 1em;
    }
.chatbot-container {
    font-family: "Noto Sans Thai Looped", sans-serif;
    font-weight: 400;
    font-style: normal;
    font-size: 16px;
    color: #333;
}
.chatbot-container .gradio-textbox, 
.chatbot-container .gradio-chatbot, 
.chatbot-container .gradio-radio          {
    font-family: "Noto Sans Thai Looped", sans-serif;
    font-weight: 400;
    font-style: normal;
}
.logo {
        background-color: #fff2d8;  /* Change this to the desired color */
    }
.logo img {
        width: 500px;  /* Set the width to a larger size */
        height: auto;   /* The height will scale proportionally */
    }
}
    
""") as demo:
    logger.info("Starting Demo...")

    with gr.Tabs() as tabs:
        with gr.TabItem("Main Page", id=0):  # First tab
            with gr.Row():
                gr.Markdown('<h1 style="font-size: 50px;">üê∂ Pet Match üê±</h1>', elem_id="title")
            with gr.Row():
                with gr.Column(scale=1):
                    logo = gr.Image(value=r"logo.gif", elem_classes="logo", show_label=False)
                    start_button = gr.Button("Start", elem_classes="my-radio-btn-start", variant= "primary-100 #ef9aa4")
                    start_button.click(change_tab, gr.Number(1, visible=False), tabs)  # Switch to the second tab (id=1)

        with gr.TabItem("Next Page", id=1):  # Second tab
            with gr.Row():
                gr.Markdown('<h1 style="font-size: 50px;">üê∂ Find Your Perfect Pet üê±</h1>', elem_id="title")
            with gr.Row():
                with gr.Column(scale=1):
                    logo = gr.Image(value=r"logo.gif", elem_classes="logo", scale=1, show_label=False)
                    mode_chatbot = gr.Button("Paws & Claws Chat", elem_classes="my-radio-btn", variant= "primary-100 #ef9aa4")
                    mode_qa = gr.Button("Match Your Pet", elem_classes="my-radio-btn", variant= "primary-100 #ef9aa4")
                    clear_btn = gr.Button("Clear History", elem_classes="my-radio-btn", variant= "secondary-300")

                with gr.Column(scale=3, elem_classes="chatbot-container"):
                    chatbot = gr.Chatbot(label="Pet Adoption Assistant", height=500, type='tuples')
                    state = gr.State([])  # Store chat history
                    state_choice = gr.State([]) 

                    txt = gr.Textbox(show_label=False, placeholder="Enter text and press enter", container=False, elem_classes="chatbot-container")
                    qa_select = gr.Radio(choices=[i[1] for i in question_options[0]], label="Select an answer", visible=False)
                    current_question_index = gr.State(0)


    # --- Gradio Event Handlers (Modified to use RAG) ---

    def update_dropdown(index):
        if index < len(questions):
            return gr.update(choices=[i[1] for i in question_options[index]], visible=True)
        else:
            return gr.update(visible=False)


    async def handle_dropdown_select(selected_value, history, list_choice, index):
        selected_level = next((key for key, value in question_options[index] if value == selected_value), "Unknown")
        list_choice.append(selected_level)
        history.append((selected_value, None))  # Append user selection
        index += 1
        
        if index < len(questions):
            next_question = questions[index][1]
            history.append((None, next_question))
            return gr.update(choices=[i[1] for i in question_options[index]], visible=True), history, index, gr.update(visible=False)
        else:
            # All questions answered:  Summarize and suggest.  CRUCIAL CHANGE HERE
            history.append((None, "Generating pet suggestion...")) # Add a temporary message
            # Create a summary of the user's preferences
            join_qna = [list_choice[i]+" "+questions[i][0] for i in range(len(questions)) if list_choice[i] != "Skip"]
            user_preferences = ", ".join(join_qna)
            # Call the RAG chain with a summarizing prompt
            summary_prompt = f"Suggest a type and breeds of pet based on these preferences : {user_preferences}"
            recommendation = get_pet_recommendation(summary_prompt)
            formatted_answer = f"üíìüíóRecommended Breedsüíóüíì\n\n{recommendation}"  # Format the answer
            history[-1] = (None, formatted_answer)  # Replace the temporary message
            return gr.update(visible=False), history, index, gr.update(visible=True)


    def show_textbox(history):
        return gr.update(visible=True), [(None, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏î ‡πÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üêæüíñ")], gr.update(visible=False), [(None, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏î ‡πÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üêæüíñ")], []
    
    def show_qa_select(history):
        history=[(None, questions[0][1])]
        return gr.update(visible=False), history, gr.update(choices=[i[1] for i in question_options[0]], visible=True), [(None, questions[0][1])], 0, []    
    
    #Select Mode
    mode_chatbot.click(show_textbox, inputs=[state], outputs=[txt, chatbot, qa_select, state])
    mode_qa.click(show_qa_select, inputs=[state], outputs=[txt, chatbot, qa_select, state, current_question_index, state_choice])
    
    #QA Mode
    qa_select.change(handle_dropdown_select, inputs=[qa_select, state, state_choice, current_question_index],
                     outputs=[qa_select, chatbot, current_question_index, txt])
    #Chatbot Mode
    async def handle_textbox_input(input_text, history):
        if not input_text:
            return history, history, None
        else:
            if "i want" in input_text or "i need" in input_text or "i like" in input_text or "pets that" in input_text or "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ" in input_text or "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà" in input_text:
                recommendation = get_pet_recommendation(input_text)
                formatted_answer = f"üíìüíóRecommended Breedsüíóüíì\n\n{recommendation}"  # Format the answer
                history.append((input_text, formatted_answer))
                return history, history, None
            else:
                response = get_chat_response(input_text, history)
                history.append((input_text, response))
                return history, history, None
                

    txt.submit(handle_textbox_input, inputs=[txt, state], outputs=[chatbot, state, txt])

    def clear_history():
        return [], [(None, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏î ‡πÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üêæüíñ")], [], 0, gr.update(value="", visible=True), gr.update(choices=[i[1] for i in question_options[0]], visible=False)

    clear_btn.click(clear_history, outputs=[state, chatbot, state_choice, current_question_index, txt,  qa_select])

demo.launch(server_name="0.0.0.0", server_port=7860)